@data List!auto {
	Empty()
	Cons(auto head, List!auto tail)
}

bool op(asBool)(List a) {
	@match(a.Empty) => false
	@match(a.Cons) => true
}

auto op(.)(List a)
	@match(a) => a.head

auto op(..)(List a)
	@match(a) => a.tail

List op([])(auto a)
	Cons(a, Empty())

List op(++)(List a, List b) {
	@match(!a) => b
	@match(a) => Cons(.a, a.. ++ b)
}

auto head(List a)
	@match(a) => .a

List tail(List a)
	@match(a) => a..

List init(List a) {
	@match(a : !a..) => Empty()
	@match(a) => [.a] ~ init(a..)
}

auto last(List l) {
	@match(a : !a..) => .a
	@match(a) => last(a..)
}